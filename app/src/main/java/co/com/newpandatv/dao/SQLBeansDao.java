package co.com.newpandatv.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SQLBEANS".
*/
public class SQLBeansDao extends AbstractDao<SQLBeans, Long> {

    public static final String TABLENAME = "SQLBEANS";

    /**
     * Properties of entity SQLBeans.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UrlTitle = new Property(1, String.class, "urlTitle", false, "URL_TITLE");
        public final static Property UrlImg = new Property(2, String.class, "urlImg", false, "URL_IMG");
        public final static Property UrlData = new Property(3, String.class, "urlData", false, "URL_DATA");
        public final static Property UrlLen = new Property(4, String.class, "urlLen", false, "URL_LEN");
        public final static Property DaoUrl = new Property(5, String.class, "daoUrl", false, "DAO_URL");
    }


    public SQLBeansDao(DaoConfig config) {
        super(config);
    }
    
    public SQLBeansDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SQLBEANS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URL_TITLE\" TEXT," + // 1: urlTitle
                "\"URL_IMG\" TEXT," + // 2: urlImg
                "\"URL_DATA\" TEXT," + // 3: urlData
                "\"URL_LEN\" TEXT," + // 4: urlLen
                "\"DAO_URL\" TEXT);"); // 5: daoUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SQLBEANS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SQLBeans entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String urlTitle = entity.getUrlTitle();
        if (urlTitle != null) {
            stmt.bindString(2, urlTitle);
        }
 
        String urlImg = entity.getUrlImg();
        if (urlImg != null) {
            stmt.bindString(3, urlImg);
        }
 
        String urlData = entity.getUrlData();
        if (urlData != null) {
            stmt.bindString(4, urlData);
        }
 
        String urlLen = entity.getUrlLen();
        if (urlLen != null) {
            stmt.bindString(5, urlLen);
        }
 
        String daoUrl = entity.getDaoUrl();
        if (daoUrl != null) {
            stmt.bindString(6, daoUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SQLBeans entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String urlTitle = entity.getUrlTitle();
        if (urlTitle != null) {
            stmt.bindString(2, urlTitle);
        }
 
        String urlImg = entity.getUrlImg();
        if (urlImg != null) {
            stmt.bindString(3, urlImg);
        }
 
        String urlData = entity.getUrlData();
        if (urlData != null) {
            stmt.bindString(4, urlData);
        }
 
        String urlLen = entity.getUrlLen();
        if (urlLen != null) {
            stmt.bindString(5, urlLen);
        }
 
        String daoUrl = entity.getDaoUrl();
        if (daoUrl != null) {
            stmt.bindString(6, daoUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SQLBeans readEntity(Cursor cursor, int offset) {
        SQLBeans entity = new SQLBeans( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // urlTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // urlImg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // urlData
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // urlLen
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // daoUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SQLBeans entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrlTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrlImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrlData(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrlLen(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDaoUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SQLBeans entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SQLBeans entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SQLBeans entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
